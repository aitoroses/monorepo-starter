// Generated by typings
// Source: node_modules/bss-hw-api/lib/src/client.d.ts
declare module '~bss-hw-api/lib/src/client' {
export interface JWT {
    workflowContext: string;
    accessLevel: number;
    locale: string;
    sub: string;
    exp: number;
    iat: number;
    profile?: {
        firstName: string;
        lastName: string;
        displayName: string;
    };
    apps?: {
        [x: string]: {
            ou: string[];
        };
    };
}
export interface AuthenticateInput {
    login: string;
    password: string;
}
export interface TokenAction {
    type: string;
    token: string;
}
export interface QueryFilter {
    keyword?: string;
    assignmentFilter: string;
    columns: string;
    clauses: QueryClause[];
}
export interface QueryClause {
    join: string;
    column: string;
    operator: string;
    value: string;
}
export interface ITask {
    title: string;
    identificationKey: string;
    creator: string;
    payload: string;
    systemAttributes: IAttributes;
}
export interface IAttributes {
    state: string;
    assignees: IAssignee[];
    assignedDate: number;
    taskId: string;
    taskDefinitionId: string;
    systemMessageAttributes: IMessageAttributes;
}
export interface IAssignee {
    id: string;
    displayName: string;
    type: string;
    systemVersionFlag: string;
}
export interface IMessageAttributes {
    textAttribute1: string;
    textAttribute2: string;
    textAttribute3: string;
}
export function decodeToken(token: any): JWT;
export const TOKEN_UPDATED: string;
export function tokenUpdated(token: string): TokenAction;
export class HumanWorkflow {
    apiUrl: string;
    subscribe(cb: Function): void;
    private subscribers;
    constructor(apiUrl?: string);
    private request(method, url, data, query?, headers?);
    authenticate(input: AuthenticateInput): Promise<any>;
    queryTasks(token: string, query: QueryFilter): Promise<ITask[]>;
    queryTasksByPage(token: string, query: QueryFilter, skip: number, limit: number): Promise<ITask[]>;
    queryTasksCount(token: string, query: QueryFilter): Promise<number>;
    getTaskDetailsById(token: string, taskId: string): Promise<ITask>;
    updateTask(token: string, task: ITask): Promise<any>;
}
}
declare module 'bss-hw-api/lib/src/client' {
export * from '~bss-hw-api/lib/src/client';
}

// Generated by typings
// Source: node_modules/bss-hw-api/lib/src/index.d.ts
declare module '~bss-hw-api/lib/src/index' {
export * from '~bss-hw-api/lib/src/client';
export { HumanWorkflow as default } from '~bss-hw-api/lib/src/client';
}
declare module 'bss-hw-api/lib/src/index' {
export * from '~bss-hw-api/lib/src/index';
export { default } from '~bss-hw-api/lib/src/index';
}
declare module 'bss-hw-api' {
export * from '~bss-hw-api/lib/src/index';
export { default } from '~bss-hw-api/lib/src/index';
}
